library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("inctotlarge.dta")
head(data)
cleaned_data <- na.omit(data)
data <- cleaned_data %>% filter(inctot != 9999998 & inctot <= 9999997)
summary(data)
summary(data %>% filter(country == 862))
#create a variable for the row numbe
country_results <- data %>%
group_by(country) %>%  # Group by country
arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
mutate(
inc_percent = inctot / sum(inctot, na.rm = TRUE),  # Income as percentage of total
cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
pop_percent = 1 / n(),  # Population percentage for each observation
cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
)
# Summarise statistics for each country
country_summary <- data %>%
group_by(country) %>%
summarise(
min_inctot = min(pop_percent, na.rm = TRUE),
max_inctot = max(pop_percent, na.rm = TRUE),
count = n()  # Number of observations
)
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("usa_00001.dta")
data <- data %>% filter(inctot <= 9999998)
#order the data from least to greatest
data <- data[order(data$inctot), ]
#create a variable for the row numbe
data$observation_number <- 1:nrow(data)
#find the sum of total income so we can claculate the percentage of the total each person earns
subset <- subset(data, inctot >= 0)
total_inc <- sum(subset$inctot)
#create a new variable to store the percentage contribution of each observation
subset$inc_percent <- (subset$inctot / total_inc)
#make a variable to hold the cumulative percentage
subset$cum_inc_percent <- cumsum(subset$inc_percent)
#make a variable that stores the percentage of the total sample each observation makes up:e 1/N where
subset$pop_percent <- (1/nrow(subset))
subset$cum_pop_percent <- cumsum(subset$pop_percent)
#plot the chart
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "b", col = "blue")
# Add grid lines
#adjust subset so there are no negatives
# Cap values at 1
min_income <- min(subset$inc_percent)
max_income <- max(subset$cum_inc_percent)
subset$cum_inc_percent[subset$cum_inc_percent > 1] <- 1
subset$cum_pop_percent[subset$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data  = subset,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = 0, beta = 0),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
# Starting values for k and P
# View the summary of the model
summary(lorenz_model)
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((subset$cum_inc_percent - mean(subset$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
print(R2)
subset$fitted_values_new <- predict(lorenz_model)
# Plot the actual subset vs. the fitted curve
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(subset$cum_pop_percent, subset$fitted_values_new, col = "red")
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the function to integrate
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- integrate(gini_integrand, lower = 0, upper = 1)
# Calculate the Gini coefficient
Gini_coefficient <- 1 - 2 * gini_result$value
# Print the Gini coefficient
print(Gini_coefficient)
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("usa_00001.dta")
data <- data %>% filter(inctot <= 9999998)
#order the data from least to greatest
data <- data[order(data$inctot), ]
#create a variable for the row numbe
data$observation_number <- 1:nrow(data)
#find the sum of total income so we can claculate the percentage of the total each person earns
subset <- subset(data, inctot >= 0)
total_inc <- sum(subset$inctot)
#create a new variable to store the percentage contribution of each observation
subset$inc_percent <- (subset$inctot / total_inc)
#make a variable to hold the cumulative percentage
subset$cum_inc_percent <- cumsum(subset$inc_percent)
#make a variable that stores the percentage of the total sample each observation makes up:e 1/N where
subset$pop_percent <- (1/nrow(subset))
subset$cum_pop_percent <- cumsum(subset$pop_percent)
#plot the chart
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "b", col = "blue")
# Add grid lines
#adjust subset so there are no negatives
# Cap values at 1
min_income <- min(subset$inc_percent)
max_income <- max(subset$cum_inc_percent)
subset$cum_inc_percent[subset$cum_inc_percent > 1] <- 1
subset$cum_pop_percent[subset$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data  = subset,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = 0, beta = 0),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
# Starting values for k and P
# View the summary of the model
summary(lorenz_model)
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((subset$cum_inc_percent - mean(subset$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
print(R2)
subset$fitted_values_new <- predict(lorenz_model)
# Plot the actual subset vs. the fitted curve
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(subset$cum_pop_percent, subset$fitted_values_new, col = "red")
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the function to integrate
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- integrate(gini_integrand, lower = 0, upper = 1)
# Calculate the Gini coefficient
Gini_coefficient <- 1 - 2 * gini_result$value
# Print the Gini coefficient
print(Gini_coefficient)
sampled_data <- data[sample(nrow(data), size = .15 * nrow(data)), ]
data <- read_dta("usa_00001.dta")
data <- data[sample(nrow(data), size = .15 * nrow(data)), ]
file_path <- "/Users/rowanmorkner/Documents/school/gitHubRepo/lorenzeCurve/sample_data.dta"
write_dta(data, file_path)
data <- data %>% filter(inctot <= 9999998)
#order the data from least to greatest
data <- data[order(data$inctot), ]
#create a variable for the row numbe
data$observation_number <- 1:nrow(data)
subset <- subset(data, inctot >= 0)
total_inc <- sum(subset$inctot)
#create a new variable to store the percentage contribution of each observation
subset$inc_percent <- (subset$inctot / total_inc)
#make a variable to hold the cumulative percentage
subset$cum_inc_percent <- cumsum(subset$inc_percent)
#make a variable that stores the percentage of the total sample each observation makes up:e 1/N where
subset$pop_percent <- (1/nrow(subset))
subset$cum_pop_percent <- cumsum(subset$pop_percent)
#plot the chart
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "b", col = "blue")
#adjust subset so there are no negatives
# Cap values at 1
min_income <- min(subset$inc_percent)
max_income <- max(subset$cum_inc_percent)
subset$cum_inc_percent[subset$cum_inc_percent > 1] <- 1
subset$cum_pop_percent[subset$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data  = subset,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = 0, beta = 0),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
# View the summary of the model
summary(lorenz_model)
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((subset$cum_inc_percent - mean(subset$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
print(R2)
subset$fitted_values_new <- predict(lorenz_model)
# Plot the actual subset vs. the fitted curve
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(subset$cum_pop_percent, subset$fitted_values_new, col = "red")
#adjust subset so there are no negatives
# Cap values at 1
min_income <- min(subset$inc_percent)
max_income <- max(subset$cum_inc_percent)
subset$cum_inc_percent[subset$cum_inc_percent > 1] <- 1
subset$cum_pop_percent[subset$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data  = subset,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = 0, beta = 0),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
# Starting values for k and P
# View the summary of the model
summary(lorenz_model)
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((subset$cum_inc_percent - mean(subset$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
print(R2)
subset$fitted_values_new <- predict(lorenz_model)
# Plot the actual subset vs. the fitted curve
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(subset$cum_pop_percent, subset$fitted_values_new, col = "red")
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the function to integrate
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- integrate(gini_integrand, lower = 0, upper = 1)
# Calculate the Gini coefficient
Gini_coefficient <- 1 - 2 * gini_result$value
# Print the Gini coefficient
print(Gini_coefficient)
library("haven")
library("ggplot2")
library("dplyr")
data <- read_dta("sample_data.dta")
# these were just useful for me because the data set I had was way too big.
#data <- data[sample(nrow(data), size = .15 * nrow(data)), ]
#file_path <- "/Users/rowanmorkner/Documents/school/gitHubRepo/lorenzeCurve/sample_data.dta"
#write_dta(data, file_path)
data <- data %>% filter(inctot <= 9999998)
#order the data from least to greatest
data <- data[order(data$inctot), ]
#create a variable for the row numbe
data$observation_number <- 1:nrow(data)
#find the sum of total income so we can claculate the percentage of the total each person earns
subset <- subset(data, inctot >= 0)
total_inc <- sum(subset$inctot)
#create a new variable to store the percentage contribution of each observation
subset$inc_percent <- (subset$inctot / total_inc)
#make a variable to hold the cumulative percentage
subset$cum_inc_percent <- cumsum(subset$inc_percent)
#make a variable that stores the percentage of the total sample each observation makes up:e 1/N where
subset$pop_percent <- (1/nrow(subset))
subset$cum_pop_percent <- cumsum(subset$pop_percent)
#plot the chart
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "b", col = "blue")
# Add grid lines
#adjust subset so there are no negatives
# Cap values at 1
min_income <- min(subset$inc_percent)
max_income <- max(subset$cum_inc_percent)
subset$cum_inc_percent[subset$cum_inc_percent > 1] <- 1
subset$cum_pop_percent[subset$cum_pop_percent > 1] <- 1
lorenz_model<- nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta,
data  = subset,
start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
lower = c(a = 0, beta = 0),  # Lower bounds to ensure positivity
upper = c(a = 10, beta = 10), # Upper bounds
algorithm = "port")  # Port algorithm for bounded fitting
# Starting values for k and P
# View the summary of the model
summary(lorenz_model)
RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
TSS <- sum((subset$cum_inc_percent - mean(subset$cum_inc_percent))^2)  # Total sum of squares
R2 <- 1 - (RSS / TSS)  # R-squared
print(R2)
subset$fitted_values_new <- predict(lorenz_model)
# Plot the actual subset vs. the fitted curve
plot(subset$cum_pop_percent, subset$cum_inc_percent, type = "p", col = "blue", main = "Estimated Curve", xlab = "Cumulative Population Percent", ylab = "Cumulative Income Percent")
lines(subset$cum_pop_percent, subset$fitted_values_new, col = "red")
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
x - a * x^a * (1 - x)^beta
}
# Get the estimated parameters from your model
a_estimate <- coef(lorenz_model)["a"]
beta_estimate <- coef(lorenz_model)["beta"]
# Define the function to integrate
gini_integrand <- function(x) {
x - lorenz_function(x, a_estimate, beta_estimate)
}
# Numerically integrate the function from 0 to 1
gini_result <- integrate(gini_integrand, lower = 0, upper = 1)
# Calculate the Gini coefficient
Gini_coefficient <- 1 - 2 * gini_result$value
# Print the Gini coefficient
print(Gini_coefficient)
