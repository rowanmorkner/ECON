---
title: "Multi Country Gini Coefficients"
author: "Rowan"
format: html
editor: visual
---

```{r}

library("haven")
library("ggplot2")
library("dplyr")

data <- read_dta("inctotlarge.dta")
head(data)
cleaned_data <- na.omit(data)

data <- cleaned_data %>% filter(inctot != 9999998 & inctot <= 9999997)
summary(data) 
 
summary(data %>% filter(country == 862))

#create a variable for the row numbe 
country_results <- data %>%
  group_by(country) %>%  # Group by country
  arrange(inctot, .by_group = TRUE) %>%  # Sort income within each country
  mutate(
    inc_percent = inctot / sum(inctot, na.rm = TRUE),  # Income as percentage of total
    cum_inc_percent = cumsum(inc_percent),  # Cumulative income percentage
    pop_percent = 1 / n(),  # Population percentage for each observation
    cum_pop_percent = cumsum(pop_percent)  # Cumulative population percentage
  )



# Summarise statistics for each country
country_summary <- data %>%
  group_by(country) %>%
  summarise(
    min_inctot = min(pop_percent, na.rm = TRUE),
    max_inctot = max(pop_percent, na.rm = TRUE),
    count = n()  # Number of observations
  )

# Print the summary statistics for each country
print(country_summary)


# Plot Lorenz curve for each country
country_results %>%
  ggplot(aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
  geom_line(size = 1.5) +  # Increase the size of the lines (adjust the value as needed)
  labs(title = "Lorenz Curve by Country", 
       x = "Cumulative Population Percentage", 
       y = "Cumulative Income Percentage") +
  theme_minimal()


# Add grid lines



```

```{r}
#adjust data so there are no negatives 
# Cap values at 1

data <- country_results
head(data)
# Check for missing values in key columns
sum(is.na(country_results$cum_inc_percent))
sum(is.na(country_results$cum_pop_percent))

data$cum_inc_percent[data$cum_inc_percent > 1] <- 1
data$cum_pop_percent[data$cum_pop_percent > 1] <- 1

# Group by country and apply the nls model within each group
results <- data %>%
  group_by(country) %>%
  group_modify(~ {
    # Fit the Lorenz curve model for each country
    lorenz_model <- tryCatch({
      nls(cum_inc_percent ~ cum_pop_percent - a * cum_pop_percent^a * (1 - cum_pop_percent)^beta, 
          data = .x,  # This refers to the current group (country)
          start = list(a = 0.5, beta = 0.5),  # Starting values for parameters
          lower = c(a = -10, beta = -10),  # Lower bounds for parameters
          upper = c(a = 10, beta = 10),  # Upper bounds for parameters
          algorithm = "port")  # Port algorithm for bounded fitting
    }, error = function(e) {
      message("Error for country ", unique(.x$country), ": ", e$message)
      return(NULL)  # Return NULL in case of error
    })
    
    # If the model fits, calculate R-squared and predictions
    if (!is.null(lorenz_model)) {
      RSS <- sum(residuals(lorenz_model)^2)  # Residual sum of squares
      TSS <- sum((.x$cum_inc_percent - mean(.x$cum_inc_percent))^2)  # Total sum of squares
      R2 <- 1 - (RSS / TSS)  # R-squared
      
      fitted_values_new <- predict(lorenz_model)
      
      return(.x %>%
               mutate(fitted_values_new = fitted_values_new,
                      R2 = R2))  # Add fitted values and R2 for this country
    } else {
      return(.x %>%
               mutate(fitted_values_new = NA, R2 = NA))  # Handle failure case
    }
  })

summary(fitted_values_new)

# Plot the results with fitted curves
ggplot(results, aes(x = cum_pop_percent, y = cum_inc_percent, color = factor(country))) +
  geom_point() +
  geom_line(aes(y = fitted_values_new), size = 1.2) +
  labs(title = "Estimated Lorenz Curves by Country",
       x = "Cumulative Population Percent",
       y = "Cumulative Income Percent") +
  theme_minimal()




```

## 

```{r}
# Define the fitted Lorenz curve function based on the estimated parameters a and beta
lorenz_function <- function(x, a, beta) {
  x - a * x^a * (1 - x)^beta
}

# Calculate Gini coefficient for each country using the already fitted models
gini_results <- results %>%
  group_by(country) %>%
  summarise(
    # Extract previously estimated coefficients for each country
    a_estimate = first(coef(lorenz_model)["a"]),
    beta_estimate = first(coef(lorenz_model)["beta"]),
    
    # Calculate the Gini coefficient
    Gini_coefficient = {
      # Define the integrand
      gini_integrand <- function(x) {
        x - lorenz_function(x, a_estimate, beta_estimate)
      }
      
      # Numerically integrate the function from 0 to 1
      gini_result <- tryCatch({
        integrate(gini_integrand, lower = 0, upper = 1)$value
      }, error = function(e) NA)  # Handle potential errors
      
      # Calculate the Gini coefficient
      if (!is.na(gini_result)) {
        1 - 2 * gini_result
      } else {
        NA
      }
    }
  )

# Print the Gini coefficient for each country
gini_results %>%
  select(country, Gini_coefficient) %>%
  print()

```
